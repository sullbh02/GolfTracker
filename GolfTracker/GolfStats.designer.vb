'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="GolfDatabase")>  _
Partial Public Class GolfStatsDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertStat(instance As Stat)
    End Sub
  Partial Private Sub UpdateStat(instance As Stat)
    End Sub
  Partial Private Sub DeleteStat(instance As Stat)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.GolfTracker.My.MySettings.Default.GolfDatabaseConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Stats() As System.Data.Linq.Table(Of Stat)
		Get
			Return Me.GetTable(Of Stat)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Stats")>  _
Partial Public Class Stat
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RoundId As Integer
	
	Private _Course As String
	
	Private _Score As Integer
	
	Private _Course_Rating As Decimal
	
	Private _Slope_Rating As Decimal
	
	Private _GolferId As Short
	
	Private _Date As Date
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRoundIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnRoundIdChanged()
    End Sub
    Partial Private Sub OnCourseChanging(value As String)
    End Sub
    Partial Private Sub OnCourseChanged()
    End Sub
    Partial Private Sub OnScoreChanging(value As Integer)
    End Sub
    Partial Private Sub OnScoreChanged()
    End Sub
    Partial Private Sub OnCourse_RatingChanging(value As Decimal)
    End Sub
    Partial Private Sub OnCourse_RatingChanged()
    End Sub
    Partial Private Sub OnSlope_RatingChanging(value As Decimal)
    End Sub
    Partial Private Sub OnSlope_RatingChanged()
    End Sub
    Partial Private Sub OnGolferIdChanging(value As Short)
    End Sub
    Partial Private Sub OnGolferIdChanged()
    End Sub
    Partial Private Sub OnDateChanging(value As Date)
    End Sub
    Partial Private Sub OnDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoundId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property RoundId() As Integer
		Get
			Return Me._RoundId
		End Get
		Set
			If ((Me._RoundId = value)  _
						= false) Then
				Me.OnRoundIdChanging(value)
				Me.SendPropertyChanging
				Me._RoundId = value
				Me.SendPropertyChanged("RoundId")
				Me.OnRoundIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Course", DbType:="NVarChar(50)")>  _
	Public Property Course() As String
		Get
			Return Me._Course
		End Get
		Set
			If (String.Equals(Me._Course, value) = false) Then
				Me.OnCourseChanging(value)
				Me.SendPropertyChanging
				Me._Course = value
				Me.SendPropertyChanged("Course")
				Me.OnCourseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Score", DbType:="Int NOT NULL")>  _
	Public Property Score() As Integer
		Get
			Return Me._Score
		End Get
		Set
			If ((Me._Score = value)  _
						= false) Then
				Me.OnScoreChanging(value)
				Me.SendPropertyChanging
				Me._Score = value
				Me.SendPropertyChanged("Score")
				Me.OnScoreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Course Rating]", Storage:="_Course_Rating", DbType:="Decimal(18,1) NOT NULL")>  _
	Public Property Course_Rating() As Decimal
		Get
			Return Me._Course_Rating
		End Get
		Set
			If ((Me._Course_Rating = value)  _
						= false) Then
				Me.OnCourse_RatingChanging(value)
				Me.SendPropertyChanging
				Me._Course_Rating = value
				Me.SendPropertyChanged("Course_Rating")
				Me.OnCourse_RatingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Slope Rating]", Storage:="_Slope_Rating", DbType:="Decimal(18,1) NOT NULL")>  _
	Public Property Slope_Rating() As Decimal
		Get
			Return Me._Slope_Rating
		End Get
		Set
			If ((Me._Slope_Rating = value)  _
						= false) Then
				Me.OnSlope_RatingChanging(value)
				Me.SendPropertyChanging
				Me._Slope_Rating = value
				Me.SendPropertyChanged("Slope_Rating")
				Me.OnSlope_RatingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GolferId", DbType:="SmallInt NOT NULL")>  _
	Public Property GolferId() As Short
		Get
			Return Me._GolferId
		End Get
		Set
			If ((Me._GolferId = value)  _
						= false) Then
				Me.OnGolferIdChanging(value)
				Me.SendPropertyChanging
				Me._GolferId = value
				Me.SendPropertyChanged("GolferId")
				Me.OnGolferIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="SmallDateTime NOT NULL")>  _
	Public Property [Date]() As Date
		Get
			Return Me._Date
		End Get
		Set
			If ((Me._Date = value)  _
						= false) Then
				Me.OnDateChanging(value)
				Me.SendPropertyChanging
				Me._Date = value
				Me.SendPropertyChanged("[Date]")
				Me.OnDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
